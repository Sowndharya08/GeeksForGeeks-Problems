2 approaches------------------------------------------------------------------------------------------------------------------------------>Time: O(N) space: O(1)
1. using 2 pointers(TORTOISE AND HARE~ FAST -SLOW)

class Solution {
  public:
    /* Should return data of middle node. If linked list is empty, then -1 */
    int getMiddle(Node* head) {
     Node *slow=head,*fast=head;
     while(fast!=NULL && fast->next!=NULL){
         fast=fast->next->next;
         slow=slow->next;
     }
     return slow->data;
    }
};  struct Node {

    int data;
    Node* next; Node(int x){
        data = x;
        next = NULL; }};
naive Approach--------------------------------------------------------------------------------------------------------------------------->Time: O(N) space: O(1)
class Solution {
  public:
    /* Should return data of middle node. If linked list is empty, then -1 */
    int getMiddle(Node* head) {
     int len=0;
     Node* temp=head;
     while(temp!=NULL){
        temp=temp->next; 
        len++;
     }
     int mid=len/2;
     while(mid--){
         head=head->next;
     }
     return head->data;
            
    }
};
