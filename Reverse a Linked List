3 approaches

3  pointers---------------------------------------------------------------------------------------->TC: O(N) SC:O(1)
Node* reverseList(Node* head) {
      // Initialize three pointers: curr, prev and next
    Node *curr = head, *prev = nullptr, *next;

      // Traverse all the nodes of Linked List
    while (curr != nullptr) {
      
        // Store next
        next = curr->next;
      
        // Reverse current node's next pointer
        curr->next = prev;
        // Move pointers one position ahead
        prev = curr;
        curr = next;
    }
      
      // Return the head of reversed linked list
    return prev;
}
2. RECURSION-------------------------------------------------------------------------------------------->TC: O(N) SC:O(N)
class Solution {
  public:
    // Function to reverse a linked list.
    struct Node* reverseList(struct Node* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        Node * rest=reverseList(head->next);
        head->next->next=head;
        head->next=NULL;
        return rest;
    }
};

3.USING STACK..THEN APPENDINGG-------------------------------------------------------------------------->TC: O(N) SC:O(N)

class Solution {
  public:
    // Function to reverse a linked list.
    struct Node* reverseList(struct Node* head) {
       stack<Node*>st;
       Node*temp=head;
       while(temp->next!=NULL){
           st.push(temp);
           temp=temp->next;
       }
       head=temp;
       while(!st.empty()){
           temp->next= st.top();
           st.pop();
           temp=temp->next;
       }

temp->next = NULL;important--------------------------------->
       return head;
    }
};
